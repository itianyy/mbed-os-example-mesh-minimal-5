/**************************************************************************//**
 * @file     tamper.h
 * @version  V3.00
 * @brief    M2354 series Tamper driver header file
 *
 * @note
 * Copyright (C) 2019 Nuvoton Technology Corp. All rights reserved.
 *****************************************************************************/
#ifndef __TAMPER_H__
#define __TAMPER_H__

#ifdef __cplusplus
extern "C"
{
#endif


/** @addtogroup Standard_Driver Standard Driver
  @{
*/

/** @addtogroup TAMPER_Driver Tamper Driver
  @{
*/

/** @addtogroup TAMPER_EXPORTED_CONSTANTS Tamper Exported Constants
  @{
*/

#define TAMP_TAMPER0_SELECT      (0x1ul << 0)    /*!< Select Tamper 0 */
#define TAMP_TAMPER1_SELECT      (0x1ul << 1)    /*!< Select Tamper 1 */
#define TAMP_TAMPER2_SELECT      (0x1ul << 2)    /*!< Select Tamper 2 */
#define TAMP_TAMPER3_SELECT      (0x1ul << 3)    /*!< Select Tamper 3 */
#define TAMP_TAMPER4_SELECT      (0x1ul << 4)    /*!< Select Tamper 4 */
#define TAMP_TAMPER5_SELECT      (0x1ul << 5)    /*!< Select Tamper 5 */
#define MAX_TAMPER_PIN_NUM       6ul             /*!< Tamper Pin number */

#define TAMP_TAMPER_HIGH_LEVEL_DETECT    1ul     /*!< Tamper pin detect voltage level is high */
#define TAMP_TAMPER_LOW_LEVEL_DETECT     0ul     /*!< Tamper pin detect voltage level is low */

#define TAMP_TAMPER_DEBOUNCE_ENABLE      1ul     /*!< Enable tamper pin de-bounce function */
#define TAMP_TAMPER_DEBOUNCE_DISABLE     0ul     /*!< Disable tamper pin de-bounce function */

#define TAMP_PAIR0_SELECT        (0x1ul << 0)    /*!< Select Pair 0 */
#define TAMP_PAIR1_SELECT        (0x1ul << 1)    /*!< Select Pair 1 */
#define TAMP_PAIR2_SELECT        (0x1ul << 2)    /*!< Select Pair 2 */
#define MAX_PAIR_NUM             3ul             /*!< Pair number */
#define ACTS_MAX_PAIR_NUM        2ul             /*!< Active Shield Pair number */

#define TAMP_2POW6_CLK           (0x0ul << TAMP_TIOCTL_DYNRATE_Pos) /*!< 64 RTC clock cycles */
#define TAMP_2POW7_CLK           (0x1ul << TAMP_TIOCTL_DYNRATE_Pos) /*!< 64 x 2 RTC clock cycles */
#define TAMP_2POW8_CLK           (0x2ul << TAMP_TIOCTL_DYNRATE_Pos) /*!< 64 x 4 RTC clock cycles */
#define TAMP_2POW9_CLK           (0x3ul << TAMP_TIOCTL_DYNRATE_Pos) /*!< 64 x 6 RTC clock cycles */
#define TAMP_2POW10_CLK          (0x4ul << TAMP_TIOCTL_DYNRATE_Pos) /*!< 64 x 8 RTC clock cycles */
#define TAMP_2POW11_CLK          (0x5ul << TAMP_TIOCTL_DYNRATE_Pos) /*!< 64 x 10 RTC clock cycles */
#define TAMP_2POW12_CLK          (0x6ul << TAMP_TIOCTL_DYNRATE_Pos) /*!< 64 x 12 RTC clock cycles */
#define TAMP_2POW13_CLK          (0x7ul << TAMP_TIOCTL_DYNRATE_Pos) /*!< 64 x 14 RTC clock cycles */

#define TAMP_ACTS_2POW10_CLK     (0x0ul << 5)    /*!< 1024 LIRC32K clock cycles */
#define TAMP_ACTS_2POW11_CLK     (0x1ul << 5)    /*!< 1024 x 2 LIRC32K clock cycles */
#define TAMP_ACTS_2POW12_CLK     (0x2ul << 5)    /*!< 1024 x 4 LIRC32K clock cycles */
#define TAMP_ACTS_2POW13_CLK     (0x3ul << 5)    /*!< 1024 x 6 LIRC32K clock cycles */
#define TAMP_ACTS_2POW14_CLK     (0x4ul << 5)    /*!< 1024 x 8 LIRC32K clock cycles */
#define TAMP_ACTS_2POW15_CLK     (0x5ul << 5)    /*!< 1024 x 16 LIRC32K clock cycles */
#define TAMP_ACTS_2POW16_CLK     (0x6ul << 5)    /*!< 1024 x 32 LIRC32K clock cycles */
#define TAMP_ACTS_2POW17_CLK     (0x7ul << 5)    /*!< 1024 x 64 LIRC32K clock cycles */

#define REF_RANDOM_PATTERN       0x0ul           /*!< The new reference pattern is generated by random number generator when the reference pattern run out */
#define REF_SEED                 0x1ul           /*!< The new reference pattern is repeated from SEED (TAMP_SEED[31:0]) when the reference pattern run out */

/*@}*/ /* end of group TAMPER_EXPORTED_CONSTANTS */


/** @addtogroup TAMPER_EXPORTED_FUNCTIONS Tamper Exported Functions
  @{
*/

/**
  * @brief      Reset Tamper Coreblock
  *
  * @param      None
  *
  * @return     None
  *
  * @details    To set TAMPER INIT control register to reset the tamper coreblock.
  *
  */
#define TAMP_CORE_RESET()                 ((uint32_t)(TAMPER->INIT = 0x55AA))

/**
  * @brief      Release Tamper Coreblock
  *
  * @param      None
  *
  * @return     None
  *
  * @details    To set TAMPER INIT control register to release the tamper coreblock.
  *
  */
#define TAMP_CORE_RELEASE()               ((uint32_t)(TAMPER->INIT = 0x5500))

/**
  * @brief      Get the TLDO Power Ready Status
  *
  * @param      None
  *
  * @retval     0   The power status of TLDO is not ready.
  * @retval     1   The power status of TLDO is ready.
  *
  * @details    This macro will return the power status of TLDO.
  *
  */
#define TAMP_TLDO_IS_READY()              (TAMPER->INIT & TAMP_INIT_TLDORDY_Msk ? 1:0)

/**
  * @brief      Enable LXT Clock Detection
  *
  * @param      None
  *
  * @return     None
  *
  * @details    To set TAMPER FUNEN control register to enable LXT clock detection.
  *
  */
#define TAMP_ENABLE_LXTDET()              ((uint32_t)(TAMPER->FUNEN = 0x44))

/**
  * @brief      Disable LXT Clock Detection
  *
  * @param      None
  *
  * @return     None
  *
  * @details    To set TAMPER FUNEN control register to disable LXT clock detection.
  *
  */
#define TAMP_DISABLE_LXTDET()             ((uint32_t)(TAMPER->FUNEN = 0x40))

/**
  * @brief      Enable HXT Clock Detection
  *
  * @param      None
  *
  * @return     None
  *
  * @details    To set TAMPER FUNEN control register to enable HXT clock detection.
  *
  */
#define TAMP_ENABLE_HXTDET()              ((uint32_t)(TAMPER->FUNEN = 0x34))

/**
  * @brief      Disable HXT Clock Detection
  *
  * @param      None
  *
  * @return     None
  *
  * @details    To set TAMPER FUNEN control register to disable HXT clock detection.
  *
  */
#define TAMP_DISABLE_HXTDET()             ((uint32_t)(TAMPER->FUNEN = 0x30))

/**
  * @brief      Tamper I/O TAMPER Block Detection Selection
  *
  * @param[in]  u32TamperSelect   Tamper pin select. Possible options are
  *                               - \ref TAMP_TAMPER0_SELECT
  *                               - \ref TAMP_TAMPER1_SELECT
  *                               - \ref TAMP_TAMPER2_SELECT
  *                               - \ref TAMP_TAMPER3_SELECT
  *                               - \ref TAMP_TAMPER4_SELECT
  *                               - \ref TAMP_TAMPER5_SELECT
  *
  * @return     None
  *
  * @details    To set TAMPER FUNEN control register to select tamper I/O 0~5 and its function is detected through TAMPER block.
  *
  */
__STATIC_INLINE void TAMP_IOSEL_TAMPER(uint32_t u32TamperSelect)
{
    uint32_t i;

    for(i = 0UL; i < (uint32_t)MAX_TAMPER_PIN_NUM; i++)
    {
        if(u32TamperSelect & (0x1UL << i))
        {
            TAMPER->FUNEN = (0x94 + i * 0x10UL);
        }
    }
}

/**
  * @brief      Tamper I/O RTC Block Detection Selection
  *
  * @param[in]  u32TamperSelect   Tamper pin select. Possible options are
  *                               - \ref TAMP_TAMPER0_SELECT
  *                               - \ref TAMP_TAMPER1_SELECT
  *                               - \ref TAMP_TAMPER2_SELECT
  *                               - \ref TAMP_TAMPER3_SELECT
  *                               - \ref TAMP_TAMPER4_SELECT
  *                               - \ref TAMP_TAMPER5_SELECT   
  *
  * @return     None
  *
  * @details    To set TAMPER FUNEN control register to select tamper I/O 0~5 and its function is detected through RTC block.
  *
  */
__STATIC_INLINE void TAMP_IOSEL_RTC(uint32_t u32TamperSelect)
{
    uint32_t i;

    for(i = 0UL; i < (uint32_t)MAX_TAMPER_PIN_NUM; i++)
    {
        if(u32TamperSelect & (0x1UL << i))
        {
            TAMPER->FUNEN = (0x90 + i * 0x10UL);
        }
    }
}

/**
  * @brief      Enable HIRC12M
  *
  * @param      None
  *
  * @return     None
  *
  * @details    To set TAMPER FUNEN control register to enable HIRC12M.
  *
  */
#define TAMP_ENABLE_HIRC12M()             ((uint32_t)(TAMPER->FUNEN &= (~TAMP_FUNEN_HIRC12MEN_Msk)))

/**
  * @brief      Disable HIRC12M
  *
  * @param      None
  *
  * @return     None
  *
  * @details    To set TAMPER FUNEN control register to disable HIRC12M.
  *
  */
#define TAMP_DISABLE_HIRC12M()            ((uint32_t)(TAMPER->FUNEN = (TAMPER->FUNEN & (~TAMP_FUNEN_HIRC12MEN_Msk)) | (0x5A << TAMP_FUNEN_HIRC12MEN_Pos)))

/**
  * @brief      Enable to Trigger FMC
  *
  * @param      None
  *
  * @return     None
  *
  * @details    Set FMCTRIGEN bit of TAMPER TRIEN control register to trigger FMC when Tamper event is detected.
  *
  */
#define TAMP_ENABLE_FMC_TRIG()            ((uint32_t)(TAMPER->TRIEN |= TAMP_TRIEN_FMCTRIGEN_Msk))

/**
  * @brief      Disable to Trigger FMC
  *
  * @param      None
  *
  * @return     None
  *
  * @details    Clear FMCTRIGEN bit of TAMPER TRIEN control register to not trigger FMC when Tamper event is detected.
  *
  */
#define TAMP_DISABLE_FMC_TRIG()           ((uint32_t)(TAMPER->TRIEN &= (~TAMP_TRIEN_FMCTRIGEN_Msk)))

/**
  * @brief      Enable to Trigger Key Store
  *
  * @param      None
  *
  * @return     None
  *
  * @details    Set KSTRIGEN bit of TAMPER TRIEN control register to trigger Key Store when Tamper event is detected.
  *
  */
#define TAMP_ENABLE_KS_TRIG()             ((uint32_t)(TAMPER->TRIEN |= TAMP_TRIEN_KSTRIGEN_Msk))

/**
  * @brief      Disable to Trigger Key Store
  *
  * @param      None
  *
  * @return     None
  *
  * @details    Clear KSTRIGEN bit of TAMPER TRIEN control register to not trigger Key Store when Tamper event is detected.
  *
  */
#define TAMP_DISABLE_KS_TRIG()            ((uint32_t)(TAMPER->TRIEN &= (~TAMP_TRIEN_KSTRIGEN_Msk)))

/**
  * @brief      Enable Wake-up Function
  *
  * @param      None
  *
  * @return     None
  *
  * @details    Set WakeupEN bit of TAMPER TRIEN control register to wake-up system when Tamper event is detected.
  *
  */
#define TAMP_ENABLE_WAKEUP()              ((uint32_t)(TAMPER->TRIEN |= TAMP_TRIEN_WakeupEN_Msk))

/**
  * @brief      Disable Wake-up Function
  *
  * @param      None
  *
  * @return     None
  *
  * @details    Clear WakeupEN bit of TAMPER TRIEN control register to not wake-up system when Tamper event is detected.
  *
  */
#define TAMP_DISABLE_WAKEUP()             ((uint32_t)(TAMPER->TRIEN &= (~TAMP_TRIEN_WakeupEN_Msk)))

/**
  * @brief      Get Tamper Event Flag
  *
  * @param      None
  *
  * @retval     0   Tamper event did not occur
  * @retval     1   Tamper event occurred
  *
  * @details    This macro indicates Tamper event occurred or not.
  *
  */
#define TAMP_GET_TAMPER_EVENT_FLAG()      ((TAMPER->EVSTS & (0xAA7F0FFF))? 1:0)

/**
  * @brief      Clear Tamper Event Status
  *
  * @param[in]  u32TamperFlag   Tamper event flag. It consists of:
  *                             - \ref TAMP_EVSTS_TAMP0IF_Msk
  *                             - \ref TAMP_EVSTS_TAMP1IF_Msk
  *                             - \ref TAMP_EVSTS_TAMP2IF_Msk
  *                             - \ref TAMP_EVSTS_TAMP3IF_Msk
  *                             - \ref TAMP_EVSTS_TAMP4IF_Msk
  *                             - \ref TAMP_EVSTS_TAMP5IF_Msk
  *                             - \ref TAMP_EVSTS_CLKFAIL_Msk
  *                             - \ref TAMP_EVSTS_CLKSTOP_Msk
  *                             - \ref TAMP_EVSTS_PWRPEV_Msk
  *                             - \ref TAMP_EVSTS_PWRNEV_Msk
  *                             - \ref TAMP_EVSTS_SECWDT_Msk
  *                             - \ref TAMP_EVSTS_ACTST1IF_Msk
  *                             - \ref TAMP_EVSTS_ACTST3IF_Msk
  *                             - \ref TAMP_EVSTS_ACTST21IF_Msk
  *                             - \ref TAMP_EVSTS_ACTST23IF_Msk
  *
  * @return     None
  *
  * @details    This macro is used to clear Tamper event flag.
  *
  */
#define TAMP_CLR_TAMPER_EVENT_STATUS(u32TamperFlag)   (TAMPER->EVSTS = (u32TamperFlag))

/**
  * @brief      Get Tamper Event Status
  *
  * @param      None
  *
  * @retval     TAMP_EVSTS_TAMP0IF_Msk    Tamper 0 event flag is generated
  * @retval     TAMP_EVSTS_TAMP1IF_Msk    Tamper 1 event flag is generated
  * @retval     TAMP_EVSTS_TAMP2IF_Msk    Tamper 2 event flag is generated
  * @retval     TAMP_EVSTS_TAMP3IF_Msk    Tamper 3 event flag is generated
  * @retval     TAMP_EVSTS_TAMP4IF_Msk    Tamper 4 event flag is generated
  * @retval     TAMP_EVSTS_TAMP5IF_Msk    Tamper 5 event flag is generated
  * @retval     TAMP_EVSTS_CLKFAIL_Msk    LXT frequency is abnormal
  * @retval     TAMP_EVSTS_CLKSTOP_Msk    LXT frequency is almost stopped
  * @retval     TAMP_EVSTS_OVPOUT_Msk     Core_SB over voltage detected
  * @retval     TAMP_EVSTS_PWRPEV_Msk     Core Power postive glitch is detected
  * @retval     TAMP_EVSTS_PWRNEV_Msk     Core Power negative glitch is detected
  * @retval     TAMP_EVSTS_ACTSEF_Msk     Active shield event is detected including the VDD and GND attack
  * @retval     TAMP_EVSTS_RTCLVR_Msk     RTC Power low voltage detection event is detected
  * @retval     TAMP_EVSTS_RIOTRIG_Msk    There is RTC tamper I/O detection event
  * @retval     TAMP_EVSTS_RCLKTRIG_Msk   There is RTC clock monitor detection event
  * @retval     TAMP_EVSTS_HXTERR_Msk     Core HXT fail event
  * @retval     TAMP_EVSTS_VBATLOSS_Msk   RTC VBAT Power loss detection event is detected
  * @retval     TAMP_EVSTS_SECWDT_Msk     Security WDT event is detected
  * @retval     TAMP_EVSTS_TLDOBOD_Msk    Brown out is detected
  * @retval     TAMP_EVSTS_ACTST1IF_Msk   Active shiled Tamper 1 event flag is generated
  * @retval     TAMP_EVSTS_ACTST3IF_Msk   Active shiled Tamper 3 event flag is generated
  * @retval     TAMP_EVSTS_ACTST21IF_Msk  2th Active shiled Tamper 1 event flag is generated
  * @retval     TAMP_EVSTS_ACTST23IF_Msk  2th Active shiled Tamper 3 event flag is generated
  *
  * @details    This macro indicates Tamper event status.
  *
  */
#define TAMP_GET_TAMPER_EVENT_STATUS()    ((TAMPER->EVSTS & (0xAA7F0FFF)))

/**
  * @brief      Power Glitch Module 12M HIRC Clock Selection
  *
  * @param      None
  *
  * @return     None
  *
  * @details    Set CKSEL12M bit of TAMPER LIRCTL control register to select 12M HIRC for power glitch module.
  *
  */
#define TAMP_PWRG_CKSEL12M()              ((uint32_t)(TAMPER->LIRCTL |= TAMP_LIRCTL_CKSEL12M_Msk))

/**
  * @brief      Power Glitch Module 32K LIRC Clock Selection
  *
  * @param      None
  *
  * @return     None
  *
  * @details    Clear CKSEL12M bit of TAMPER LIRCTL control register to select 32K LIRC for power glitch module.
  *
  */
#define TAMP_PWRG_CKSEL32K()              ((uint32_t)(TAMPER->LIRCTL &= (~TAMP_LIRCTL_CKSEL12M_Msk)))



void TAMP_EnableInt(uint32_t u32IntFlagMask);
void TAMP_DisableInt(uint32_t u32IntFlagMask);
void TAMP_StaticTamperEnable(uint32_t u32TamperSelect, uint32_t u32DetecLevel, uint32_t u32DebounceEn);
void TAMP_StaticTamperDisable(uint32_t u32TamperSelect);
void TAMP_DynamicTamperEnable(uint32_t u32PairSel, uint32_t u32DebounceEn, uint32_t u32Pair1Source, uint32_t u32Pair2Source);
void TAMP_DynamicTamperDisable(uint32_t u32PairSel);
void TAMP_DynamicTamperConfig(uint32_t u32ChangeRate, uint32_t u32SeedReload, uint32_t u32RefPattern, uint32_t u32Seed);
void TAMP_ActiveShieldDynamicTamperEnable(uint32_t u32PairSel1, uint32_t u32Pair1Source1, uint32_t u32PairSel2, uint32_t u32Pair1Source2);
void TAMP_ActiveShieldDynamicTamperDisable(uint32_t u32PairSel1, uint32_t u32PairSe2);
void TAMP_ActiveShieldDynamicTamperConfig(uint32_t u32ChangeRate1, uint32_t u32SeedReload1, uint32_t u32RefPattern1, uint32_t u32Seed,
                                          uint32_t u32ChangeRate2, uint32_t u32SeedReload2, uint32_t u32RefPattern2, uint32_t u32Seed2);

/*@}*/ /* end of group TAMPER_EXPORTED_FUNCTIONS */

/*@}*/ /* end of group TAMPER_Driver */

/*@}*/ /* end of group Standard_Driver */

#ifdef __cplusplus
}
#endif

#endif /* __TAMPER_H__ */

/*** (C) COPYRIGHT 2019 Nuvoton Technology Corp. ***/
